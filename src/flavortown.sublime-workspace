{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"req",
				"requestRoute"
			],
			[
				"id",
				"id"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "import React, {Fragment, useState, useEffect, useRef} from 'react';\nimport 'reactjs-popup/dist/index.css';\nimport NewItem from '../components/newItem';\nimport ItemEdit from '../components/itemEdit';\nimport ItemSelect from '../components/itemSelect';\nimport AffinitySelect from '../components/affinitySelect';\nimport \"../styles/editor.css\";\nimport APICalls from '../apiCalls';\nimport SimpleModal from '../components/simpleModal';\nimport { Modal } from 'bootstrap'\n\nconst styles = {\n  friends: {\n    fontSize: \"smaller\",\n    columnWidth: \"100px\"\n  },\n  button: {\n    fontSize: \"1em\",\n    color: \"white\", \n  }, \n  section: {\n    marginTop: \"5px\",\n  }\n};\n\n\n\n  const itemClasses = {\n    \"1\": \"friend\",\n    \"2\": \"goodfriend\",\n    \"3\": \"bestfriend\",\n    \"4\": \"bff\",\n    \"-1\": \"enemy\",\n    \"5\": \"ingred\"\n  };\n\n\n\n\nfunction Editor() {\n  const mainRef = useRef();\n  const friendRef = useRef();\n  const affinityRef = useRef();\n  const editItemRef = useRef();\n  const modalRef = useRef();\n  const [editMode, setEditMode] = useState(false);\n  const [items, setItems] = useState([]);\n  const [friends, setFriends] = useState([]);\n  const [mainId, setMainId] = useState();\n  const [inputText, setInputText] = useState(\"\");\n  const [friendId, setFriendId] = useState();\n  const [affinityId, setAffinityId] = useState(1);\n  const [newIsOpen, setNewIsOpen] = useState(false);\n  const [editIsOpen, setEditIsOpen] = useState(false);\n  const [fieldName, setFieldName] = useState(\"\");\n  const [modal, setModal] = useState();\n  const [catId, setCatId] = useState();\n  const [cats, setCats] = useState([]);\n  const [modalMessage, setModalMessage] = useState(\"Done!\");\n\n  \n  const fetchItems = async () => {\n      const data = await APICalls.getAllItems();\n      setItems(data);\n    };\n\n\n  useEffect(() => {\n    fetchItems();\n    if (!editMode) mainRef.current.focus();\n    setFieldName(\"main\");\n  }, []);  //on load only\n\n  useEffect(() => {\n    setModal(\n      new Modal(modalRef.current)\n    )\n  }, []);\n\n  useEffect(() => {\n   const getCats = async() => {\n     const data = await APICalls.getCats();\n     setCats(data);\n   };\n   getCats();\n  }, []);  //only on load\n\n\n  useEffect(() => {\n  if (mainId) {\n    const fetchFriends = async() => {\n      const data = await APICalls.getFriends(mainId);\n      setFriends(data);\n    };\n    fetchFriends();\n  }\n  }, [mainId]); //whever mainId changes refetch friends\n\nconst openNewFromBtn = () => {\n  setInputText(\"\");\n  setNewIsOpen(true);\n};\nconst openNewItem = (newText) => {\n   setInputText(newText);\n   setNewIsOpen(true);\n };\n\nconst openEditFromBtn = () => {\n  setEditIsOpen(!editIsOpen);\n};\n\n//EDIT ITEM\nconst changeEditMode = () => {\n//dont open if there's no id selectd\n  if (mainId) {\n    setEditMode(!editMode);\n    //console.log('curr vals: ', mainId, inputText, catId);\n  }\n};\n\nconst editItemName = (e) => {\n  setInputText(e.target.value);\n}\n\n const closeEditItem = () => {\n  if (fieldName === \"main\") {\n    friendRef.current.focus();\n  } else {\n    document.getElementById(\"addpairingbtn\").focus();\n  }\n   \n   setEditIsOpen(false);\n };\n\n\n const closeNewItem = () => {\n  if (fieldName === \"main\") {\n    friendRef.current.focus();\n  } else {\n    document.getElementById(\"addpairingbtn\").focus();\n  }\n   \n   setNewIsOpen(false);\n };\n\nconst deletePairing = async() => {\n  if (!mainId || !friendId) return;\n   //do some validation?\n    try {\n        await APICalls.deletePairing(mainId, friendId);\n\n        //refresh friends\n        const data = await APICalls.getFriends(mainId);\n        setFriends(data);\n       \n       //set focus back on friendId\n        friendRef.current.focus();\n\n      } catch(err) {\n        console.error(err.message);\n      }\n};\n  \n  const handleMainChange = (id, name, catId) => {\n    setMainId(id);  //triggers friends change\n    setInputText(name);\n    setCatId(catId);\n  };\n\n  const handleFriendChange = async(val, name) => {\n    if (!val) return;\n    setFriendId(val);\n    setInputText(name);\n    //is this an edit? if so pop in affinity level too\n    if (friends) {\n      const result = friends.find(f => {\n        return f.id === val });\n        if (result) {\n          setAffinityId(result.affinity_level);\n        }\n    } else {\n      setAffinityId(1); //defalt\n    }\n\n    if (fieldName === \"main\") {\n      friendRef.current.focus();\n      setFieldName(\"friend\");\n    } else {\n      document.getElementById(\"addpairingbtn\").focus();\n    }\n  };\n\n  const handleAffinityChange = (val) => {\n    setAffinityId(val);\n    document.getElementById(\"addpairingbtn\").focus();\n  };\n\n  const handleAddPairing = async () => {\n    //do some validation?\n    try {\n        await APICalls.addNewPairing(mainId, friendId, affinityId);\n\n        //refresh friends\n        const data = await APICalls.getFriends(mainId);\n        setFriends(data);\n       \n       //set focus back on friendId\n        friendRef.current.focus();\n\n      } catch(err) {\n        console.error(err.message);\n      }\n  };\n\n  const handleItemAdd = async (addedItem) => {\n     const data = await APICalls.getAllItems();\n     setItems(data);\n\n       if( fieldName === \"main\") {\n         handleMainChange(addedItem.id, addedItem.name);\n      } else {\n         handleFriendChange(addedItem.id, addedItem.name);\n      }\n     closeNewItem();\n  };\n\n  const onClick = (field) => {\n    setFieldName(field);\n  };\n\n  const selectFriend = (e) => {\n    // setFriendId(Number(e.target.attributes[\"data-id\"].value));\n    // setAffinityId(Number(e.target.attributes[\"data-affinity\"].value));\n   setFriendId(e.id);\n   setAffinityId(e.affinity_level);\n\n  }\n  \nconst updateCombo = async() => {\n  if (!mainId) return;\n   //do some validation?\n    try {\n      console.log('update started for: ', mainId);\n        await APICalls.updateCombo(mainId);\n        setModalMessage(\"All ingredients now relate to eachother\");\n        modal.show();\n\n      } catch(err) {\n        console.error(err.message);\n      }\n};\n\n  \nconst EditBtn = () => {\n  return (\n     <button \n          type=\"button\"\n          className=\"btn btn-sm editItemBtn\"\n          id=\"editItemBtn\"\n          onClick={changeEditMode}\n          tabIndex={-1}\n      >\n         <svg fill=\"#000000\" xmlns=\"http://www.w3.org/2000/svg\"  viewBox=\"0 0 24 24\" width=\"24px\" height=\"24px\"> \n            <path d=\"M 16.9375 1.0625 L 3.875 14.125 L 1.0742188 22.925781 L 9.875 20.125 L 22.9375 7.0625 C 22.9375 7.0625 22.8375 4.9615 20.9375 3.0625 C 19.0375 1.1625 16.9375 1.0625 16.9375 1.0625 z M 17.3125 2.6875 C 18.3845 2.8915 19.237984 3.3456094 19.896484 4.0214844 C 20.554984 4.6973594 21.0185 5.595 21.3125 6.6875 L 19.5 8.5 L 15.5 4.5 L 16.9375 3.0625 L 17.3125 2.6875 z M 4.9785156 15.126953 C 4.990338 15.129931 6.1809555 15.430955 7.375 16.625 C 8.675 17.825 8.875 18.925781 8.875 18.925781 L 8.9179688 18.976562 L 5.3691406 20.119141 L 3.8730469 18.623047 L 4.9785156 15.126953 z\"/>\n         </svg>\n    </button>\n  )\n};\n\nconst changeCat = (e) => {\n  console.log(e.target.value);\n  setCatId(e.target.value);\n  //document.getElementById(\"addItemBtn\").focus();\n}\n\nconst handleEditItem = async(e) => {\n  console.log('got here vals:', catId, mainId, inputText);\n  const currentMainId = mainId;\n  if (!mainId) return;\n\n   //do some validation?\n    try {\n      console.log('editing: ', mainId);\n      let res = await APICalls.updateItem(mainId, inputText, catId);\n      if (res) {\n        setModalMessage(\"Item updated\");\n        modal.show();\n        //somehow requery item lists\n        await fetchItems();\n        setMainId(currentMainId);\n        setEditMode(false);\n      }\n    } catch(err) {\n      console.error(err.message);\n    }\n};\n\nconst mainOrEdit = (e) => {\n  if (editMode) {\n    return (\n   <div className=\"w-100 edit-name d-flex-column justify-content-start\">\n      <label className=\"control-label\" htmlFor=\"item-edit\">Edit Item Name: {mainId}</label>\n      <textarea \n          type=\"text\" \n          className=\"form-control\" \n          id=\"item-edit\" \n          value={inputText}\n          onChange={editItemName}\n      />\n    </div>\n    )\n  } else {\n    return (\n         <ItemSelect\n            onClick={() => onClick(\"main\")}\n            thisRef={mainRef} \n            data={items}\n            value={mainId}\n            onChange={handleMainChange}\n            label=\"Main Item\"\n            onNoMatch={openNewItem}\n            onMatch={closeNewItem}\n         />\n    )\n  }\n};\n\n  return (\n\n<Fragment>\n\n<div className=\"pairings-container \">\n\n    <div className=\"main-row row w-100 d-flex justify-content-start \">\n\n           <div className=\"col-md-6 gx-0 d-flex align-items-end\">\n                  {mainOrEdit()}\n                  <EditBtn />\n           </div>\n           <div className=\"col-md-4 gx-0\">\n              <label className=\"control-label\" htmlFor=\"selectcontrol\">Main Category: {catId}</label>\n              <select \n                className=\"form-control form-select\" \n                id=\"selectcontrol\" \n                onChange={changeCat}\n                required\n                value={catId}\n              >\n                {cats && cats.map(c => (\n                  <option key={c.cat_id} value={c.cat_id}>{c.cat}</option>\n                ))}\n              </select>\n           </div>\n\n           <div className=\"btns-container col-md-2 d-flex justify-content-start align-items-end\">\n                <button \n                    type=\"button\"\n                    className=\"btn btn-sm btn-success\"\n                    id=\"addpairingbtn\"\n                    onClick={handleEditItem}\n                >\n                  <i className=\"fas fa-arrow-up\"></i>\n                </button>\n                <button \n                    type=\"button\"\n                    className=\"btn btn-sm editItemBtn\"\n                    id=\"AddItembtn\"\n                    onClick={openNewFromBtn}\n                    tabIndex={-1}\n                >\n                  <i className=\"fas fa-plus\"></i>\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"btn btn-sm deletePairingBtn\"\n                    id=\"deletePairingBtn\"\n                    onClick={deletePairing}\n                    tabIndex={-1}\n                    >\n                    <i className=\"fas fa-trash-alt\"></i>\n                </button>\n                   <button\n                    type=\"button\"\n                    className=\"btn btn-sm updateComboBtn\"\n                    id=\"updateComboBtn\"\n                    onClick={updateCombo}\n                    tabIndex={-1}\n                    >\n                <i className=\"fab fa-connectdevelop\"></i>\n                </button>\n            </div>\n\n    </div>\n\n\n    <div className=\"row gx-sm-0 gx-md-3 d-flex align-items-end\">\n\n             <div className=\"col-md-3\" >\n              <ItemSelect\n                    thisRef={friendRef}\n                    onClick={() => onClick(\"friend\")}\n                    data={items} \n                    value={friendId}\n                    onChange={handleFriendChange}\n                    label=\"Pairs With\"\n                    onNoMatch={openNewItem}\n                    onMatch={handleFriendChange}\n               />\n            </div>\n\n              <div className=\"col-md-3\">\n                <AffinitySelect \n                    thisRef={affinityRef}\n                    value={affinityId}\n                    onChange={handleAffinityChange}\n                    label=\"Affinity Level\"\n                />\n              </div>\n        \n              <div className=\"btns-container col-md-2 d-flex justify-content-start align-items-end\">\n                <button \n                    type=\"button\"\n                    className=\"btn btn-sm btn-success\"\n                    id=\"addpairingbtn\"\n                    onClick={handleAddPairing}\n                >\n                 <i className=\"fas fa-arrow-down\"></i>\n               </button>\n                <button \n                    type=\"button\"\n                    className=\"btn btn-sm editItemBtn\"\n                    id=\"AddItembtn\"\n                    onClick={openNewFromBtn}\n                    tabIndex={-1}\n                >\n                 <i className=\"fas fa-plus\"></i>\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"btn btn-sm deletePairingBtn\"\n                    id=\"deletePairingBtn\"\n                    onClick={deletePairing}\n                    tabIndex={-1}\n                    >\n                    <i className=\"fas fa-trash-alt\"></i>\n                </button>\n                   <button\n                    type=\"button\"\n                    className=\"btn btn-sm updateComboBtn\"\n                    id=\"updateComboBtn\"\n                    onClick={updateCombo}\n                    tabIndex={-1}\n                    >\n                <i className=\"fab fa-connectdevelop\"></i>\n                </button>\n            </div>\n  \n\n        \n  </div>\n</div> \n\n<div className=\"friends-container mh-25\">\n             <div>\n               <ul id=\"friendslist\"  className=\"friends-group\">\n               {friends && friends.map(i => (\n                <li \n                    onClick={() => selectFriend(i)} \n                    key={i.id}\n                    data-id={i.id}\n                    data-name={i.name}\n                    data-affinity={i.affinity_level}\n                    >\n           \n                    \n                   <span \n                       className={itemClasses[i.affinity_level].concat(\" listitem \")}\n                       key={i.id}\n                       data-id={i.id}\n                       data-name={i.name}\n                       data-affinity={i.affinity_level}\n                       onClick={()=> selectFriend(i)}\n                  >\n                       {i.name}\n                    </span>\n                  </li> ))}\n                  </ul>\n                 \n           </div>\n        </div>\n\n\n <NewItem \n  text={inputText} \n  onAdd={handleItemAdd} \n  onClose={closeNewItem}\n  isOpen={newIsOpen}\n/> \n<ItemEdit \n  defaultItemId={mainId}\n  data={items} \n  onClose={closeEditItem}\n  thisRef={editItemRef}\n  isOpen={editIsOpen}\n/>\n<SimpleModal\n  title={\"Success!\"}\n  thisRef={modalRef}\n  modal={modal}\n  >{modalMessage}\n</SimpleModal>\n \n</Fragment>\n  );\n}\n\nexport default Editor;",
			"file": "pages/Editor.js",
			"file_size": 14230,
			"file_write_time": 132641107816376453,
			"settings":
			{
				"buffer_size": 14231,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "apiCalls.js",
			"settings":
			{
				"buffer_size": 5006,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "components/itemSelect.js",
			"settings":
			{
				"buffer_size": 2481,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "styles/editor.css",
			"settings":
			{
				"buffer_size": 2214,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 352.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Snippet: ",
				"Snippet: template for functional component"
			],
			[
				"term",
				"Preferences: Terminus Settings"
			],
			[
				"ter",
				"Terminus: Open Default Shell in Panel"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"git push",
				"Git: Push"
			],
			[
				"git ch",
				"git: checkout"
			],
			[
				"package control install package",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"LiveReload: Enable/disable plugins",
				"LiveReload: Enable/disable plug-ins"
			],
			[
				"livere",
				"LiveReload: Enable/disable plug-ins"
			],
			[
				"Package Con",
				"Package Control: Install Package"
			],
			[
				"Package Control: Install",
				"Package Control: Install Package"
			],
			[
				"Package Cont",
				"Package Control: List Packages"
			]
		],
		"width": 425.0
	},
	"console":
	{
		"height": 211.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/terry/myProjects/flavortown",
		"/home/terry/myProjects/flavortown/src",
		"/home/terry/myProjects/flavortown/src/components",
		"/home/terry/myProjects/flavortown/src/images",
		"/home/terry/myProjects/flavortown/src/pages",
		"/home/terry/myProjects/flavortown/src/styles",
		"/home/terry/myProjects/flavortown/src/utilities"
	],
	"file_history":
	[
		"/home/terry/myProjects/flavortown/src/apiCalls.js",
		"/home/terry/myProjects/flavortown/src/components/itemSelect.js",
		"/home/terry/myProjects/flavortown/src/components/itemsListFull.js",
		"/home/terry/myProjects/flavortown/src/pages/FlavorFinder.js",
		"/home/terry/myProjects/flavortown/src/styles/tags.css",
		"/home/terry/myProjects/flavortown/src/styles/itemSelect.css",
		"/home/terry/myProjects/flavortown/src/components/TagsBox.js",
		"/home/terry/myProjects/flavortown/src/styles/friends.css",
		"/home/terry/myProjects/flavortown/src/components/simpleModal.js",
		"/home/terry/myProjects/flavortown/src/pages/Editor.js",
		"/home/terry/myProjects/flavortown/src/styles/editor.css",
		"/home/terry/myProjects/flavortown/src/app.js",
		"/home/terry/myProjects/flavortown/src/components/modal.js",
		"/home/terry/myProjects/flavortown/src/utilities/cats.js",
		"/home/terry/myProjects/flavortown/src/components/newItem.js",
		"/home/terry/myProjects/flavortown/src/styles/itemEntry.css",
		"/home/terry/myProjects/flavortown/src/components/affinitySelect.js",
		"/home/terry/myProjects/flavortown/src/pages/editor.js",
		"/home/terry/myProjects/flavortown/src/styles/selectStyles.css",
		"/home/terry/myProjects/flavortown/src/components/itemEdit.js",
		"/home/terry/myProjects/flavortown/src/styles/App.css",
		"/home/terry/myProjects/flavortown/public/index.html",
		"/home/terry/myProjects/flavortown/src/pages/testPage.js",
		"/home/terry/myProjects/flavortown/src/styles/Tags.css",
		"/home/terry/myProjects/flavortown/src/utilities/data.js",
		"/home/terry/myProjects/flavortown/src/pages/createDish.js",
		"/home/terry/myProjects/flavortown/src/components/mutualFriendsList.js",
		"/home/terry/myProjects/flavortown/src/components/autocomplete.js",
		"/home/terry/myProjects/flavortown/src/pages/enterPairing.js",
		"/home/terry/myProjects/flavortown/src/styles/autocomplete.css",
		"/home/terry/myProjects/flavortown/src/images/edit_pencil.svg",
		"/home/terry/myProjects/flavortown/src/components/navbar.js",
		"/home/terry/myProjects/flavortown/src/components/itemsList.js",
		"/home/terry/myProjects/flavortown/src/styles/index.css",
		"/home/terry/myProjects/flavortown/src/index.js",
		"/home/terry/myProjects/flavortown/src/pages/../styles/pairings.css",
		"/home/terry/myProjects/flavortown/src/styles/pairings.css",
		"/home/terry/myProjects/flavortown/node_modules/react-bootstrap-autosuggest/src/Autosuggest.scss",
		"/home/terry/myProjects/flavortown/src/components/itemCard.js",
		"/home/terry/myProjects/flavortown/src/components/autocomplete_basic.js",
		"/home/terry/myProjects/flavortown/src/styles/reactTags.css",
		"/home/terry/myProjects/flavortown/src/components/tagsInput_2.js",
		"/home/terry/myProjects/flavortown/src/components/tagsInput.js",
		"/home/terry/myProjects/flavortown/src/template.js",
		"/home/terry/myProjects/flavortown/src/flavortown-api.sublime-project",
		"/home/terry/myProjects/flavortown-api/.env",
		"/home/terry/myProjects/flavortown/README.md",
		"/home/terry/myProjects/wesbos/01 - JavaScript Drum Kit/test.html",
		"/home/terry/myProjects/wesbos/01 - JavaScript Drum Kit/index.html",
		"/home/terry/.config/sublime-text-3/Packages/User/Terminal.sublime-settings",
		"/home/terry/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
		"/home/terry/.config/sublime-text-3/Packages/BrowserIntegration/BrowserIntegration.sublime-settings",
		"/home/terry/myProjects/wesbos/01 - JavaScript Drum Kit/sounds/test.html",
		"/home/terry/myProjects/wesbos/01 - JavaScript Drum Kit/index-START.html",
		"/home/terry/browser sync",
		"/home/terry/.config/sublime-text-3/Packages/User/chrome.sublime-build",
		"/home/terry/.config/sublime-text-3/Packages/User/Chrome.sublime-build",
		"/home/terry/Downloads/doctolib-test/node_modules/babel-cli/lib/babel/dir.js",
		"/home/terry/Downloads/doctolib-test/package.json",
		"/home/terry/exercism/javascript/collatz-conjecture/collatz-conjecture.js",
		"/home/terry/exercism/javascript/collatz-conjecture/collatz-conjecture.spec.js",
		"/home/terry/exercism/javascript/triangle/triangle.js",
		"/home/terry/exercism/javascript/triangle/triangle.spec.js",
		"/home/terry/exercism/javascript/reverse-string/reverse-string.js",
		"/home/terry/exercism/javascript/reverse-string/reverse-string.spec.js",
		"/home/terry/exercism/javascript/resistor-color-duo/resistor-color-duo.js",
		"/home/terry/exercism/javascript/resistor-color-duo/resistor-color-duo.spec.js",
		"/home/terry/exercism/javascript/leap/leap.spec.js",
		"/home/terry/exercism/javascript/leap/leap.js",
		"/home/terry/exercism/javascript/resistor-color/resistor-color.spec.js",
		"/home/terry/exercism/javascript/resistor-color/resistor-color.js",
		"/home/terry/exercism/javascript/two-fer/two-fer.spec.js",
		"/home/terry/exercism/javascript/roman-numerals/roman-numerals.spec.js",
		"/home/terry/exercism/javascript/roman-numerals/roman-numerals.js",
		"/home/terry/exercism/javascript/hello-world/hello-world.spec.js",
		"/home/terry/exercism/javascript/two-fer/two-fer.js",
		"/home/terry/exercism/javascript/hello-world/hello-world.js",
		"/home/terry/exercism/javascript/package.json",
		"/home/terry/myProjects/tester/webpack.common.js",
		"/home/terry/myProjects/tester/.storybook/webpack.config.js",
		"/home/terry/myProjects/tester/src/components/Sandbox/sandbox.stories.js",
		"/home/terry/myProjects/tester/src/lib/sandbox.stories.js",
		"/home/terry/myProjects/tester/src/lib/structures.js",
		"/home/terry/myProjects/tester/src/lib/structures.stories.js",
		"/home/terry/myProjects/tester/package.json",
		"/home/terry/myProjects/tester/.storybook/config.js",
		"/home/terry/myProjects/tester/src/lib/structures.test.js",
		"/home/terry/myProjects/tester/src/lib/math.test.js",
		"/home/terry/myProjects/tester/src/lib/math.js",
		"/home/terry/myProjects/tester/src/lib/sorting.test.js",
		"/home/terry/myProjects/tester/src/lib/sorting.js",
		"/home/terry/myProjects/tester/src/lib/katas.test.js",
		"/home/terry/myProjects/tester/src/lib/katas.js",
		"/home/terry/myProjects/react-starter/src/routes/App/index.js",
		"/home/terry/myProjects/react-starter/test/enzyme.setup.js",
		"/home/terry/myProjects/react-starter/src/store/appReducer.js",
		"/home/terry/myProjects/react-starter/webpack.common.js",
		"/home/terry/myProjects/react-starter/package.json",
		"/home/terry/myProjects/react-starter/webpack.dev.js",
		"/home/terry/myProjects/webpack-hell/src/index.js",
		"/home/terry/myProjects/webpack-hell/src/style.css",
		"/home/terry/myProjects/webpack-hell/dist/print.bundle.js",
		"/home/terry/myProjects/webpack-hell/src/print.js",
		"/home/terry/myProjects/webpack-hell/src/template.html",
		"/home/terry/myProjects/webpack-hell/webpack.config.js",
		"/home/terry/myProjects/webpack-hell/src/assets/print.js",
		"/home/terry/myProjects/webpack-hell/package.json",
		"/home/terry/myProjects/webpack-hell/dist/index.html",
		"/home/terry/myProjects/webpack-hell/index.html",
		"/home/terry/myProjects/react-starter/dist/index.html",
		"/home/terry/myProjects/react-starter/webpack.prod.js",
		"/home/terry/myProjects/react-starter/src/store/index.js",
		"/home/terry/myProjects/react-starter/src/routes/App/App.test.js",
		"/home/terry/myProjects/react-starter/.babelrc",
		"/home/terry/myProjects/react-starter/src/store/AppReducer.test.js",
		"/home/terry/myProjects/react-starter/src/index.html",
		"/home/terry/myProjects/react-starter/index.template.html",
		"/home/terry/myProjects/react-starter/src/actions/appActions.js",
		"/home/terry/myProjects/react-starter/src/components/App/index.js",
		"/home/terry/myProjects/react-starter/src/entry.js",
		"/home/terry/myProjects/react-starter/src/actions/types.js",
		"/home/terry/myProjects/react-starter/src/components/App/App.test.js",
		"/home/terry/myProjects/react-starter/src/lib/math.test.js",
		"/home/terry/myProjects/react-starter/src/lib/math.js",
		"/home/terry/myProjects/react-starter/test/App.test.js",
		"/home/terry/myProjects/react-starter/src/styles/project.scss",
		"/home/terry/myProjects/react-starter/.gitignore",
		"/home/terry/myProjects/react-starter/index.html"
	],
	"find":
	{
		"height": 85.0
	},
	"find_in_files":
	{
		"height": 181.5,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			";\n",
			"();\n",
			"      // console.log('items selected', selected);",
			"{ "
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": false,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": false
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "pages/Editor.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14231,
						"regions":
						{
						},
						"selection":
						[
							[
								5953,
								5953
							]
						],
						"settings":
						{
							"bs_sintax": "javascript (babel)",
							"buffer_scroll_name": "6a2c21b7",
							"git_gutter_is_enabled": true,
							"spell_check": false,
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4680.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "apiCalls.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5006,
						"regions":
						{
						},
						"selection":
						[
							[
								4447,
								4447
							]
						],
						"settings":
						{
							"bs_sintax": "javascript (babel)",
							"buffer_scroll_name": "a393ecd1",
							"git_gutter_is_enabled": true,
							"spell_check": false,
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1651.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "components/itemSelect.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2481,
						"regions":
						{
						},
						"selection":
						[
							[
								811,
								811
							]
						],
						"settings":
						{
							"bs_sintax": "javascript (babel)",
							"buffer_scroll_name": "76349391",
							"git_gutter_is_enabled": true,
							"spell_check": false,
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 720.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "styles/editor.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2214,
						"regions":
						{
						},
						"selection":
						[
							[
								21,
								21
							]
						],
						"settings":
						{
							"bs_sintax": "css",
							"buffer_scroll_name": "4bb12724",
							"git_gutter_is_enabled": true,
							"spell_check": false,
							"syntax": "Packages/CSS/CSS.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 41.0
	},
	"input":
	{
		"height": 65.6666666667
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.Terminus":
	{
		"height": 158.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 134.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/Chrome.sublime-build",
	"project": "flavortown.sublime-project",
	"replace":
	{
		"height": 78.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 376.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
